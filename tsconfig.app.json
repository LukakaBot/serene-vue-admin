{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,
    /** */
    "composite": true,
    "target": "ES2022",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": [
      "ES2023",
      "DOM",
      "DOM.Iterable"
    ],
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "preserve",
    "noImplicitAny": true, // 在表达式和声明上有隐含的 any 类型时报错
    "noImplicitThis": true, // 当 this 表达式值为 any 类型的时候，生成一个错误
    "alwaysStrict": true, // 以严格模式检查每个模块，并在每个文件里加入 'use strict'
    "strictFunctionTypes": true, // 函数类型的参数要求为相同类型
    "strictPropertyInitialization": true, // 类的实例属性必须初始化
    "strictBindCallApply": true, // 严格的 bind/call/apply 检查
    "strictNullChecks": true, // 启用严格的 null 检查
    /* Additional Checks */
    "noImplicitReturns": true, // 并不是所有函数里的代码都有返回值时，抛出错误
    "noUncheckedIndexedAccess": true, // 用于监视可能是 null 的索引表达式
    "noImplicitOverride": true, // 当在重写方法时，如果没有正确匹配到父类的方法时，抛出错误
    "noPropertyAccessFromIndexSignature": false, // 防止通过索引签名访问属性时出错
    "baseUrl": "./",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "types": [
      "@types/node",
      "vite/client",
      "vue-macros/macros-global",
      "vite-plugin-svg-icons/client"
    ],
    "typeRoots": [
      "./node_modules/@types/",
      "./node_modules",
      "src/typings"
    ]
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "src/**/*.d.ts"
  ],
  "vueCompilerOptions": {
    "plugins": [
      "vue-macros/volar"
    ]
  }
}